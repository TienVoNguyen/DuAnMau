/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import mydao.NHDao;
import myentity.NguoiHoc;
import myinterfaces.BaseDaoInterface;
import xhelper.Auth;
import xhelper.DateHelper;
import xhelper.MyMess;
import xhelper.MyValidate;

/**
 *
 * @author NTV
 */
public class QLNHFrm extends javax.swing.JInternalFrame {

    private DefaultTableModel dtm;
    private BaseDaoInterface dao;
    private int index;

    /**
     * Creates new form QLKH
     */
    public QLNHFrm() {
        initComponents();

        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        cbxTimKiem = new javax.swing.JComboBox<>();
        btnTimKiem = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtMaNH = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtNgaySinh = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        rdoNam = new javax.swing.JRadioButton();
        rdoNu = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnpre = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNguoiHoc = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setResizable(true);
        setPreferredSize(new java.awt.Dimension(500, 300));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TÌM KIẾM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(51, 102, 255))); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        txtTimKiem.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txtTimKiem.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel1.add(txtTimKiem, java.awt.BorderLayout.CENTER);

        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        cbxTimKiem.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        cbxTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Tìm theo mã", "Tìm theo tên" }));
        cbxTimKiem.setMinimumSize(new java.awt.Dimension(0, 0));
        cbxTimKiem.setPreferredSize(new java.awt.Dimension(105, 20));
        jPanel11.add(cbxTimKiem);
        cbxTimKiem.getAccessibleContext().setAccessibleName("");

        btnTimKiem.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        btnTimKiem.setText("Tìm Kiếm");
        btnTimKiem.setMinimumSize(new java.awt.Dimension(0, 0));
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });
        jPanel11.add(btnTimKiem);

        jPanel1.add(jPanel11, java.awt.BorderLayout.EAST);

        jPanel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        jPanel3.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.setLayout(new java.awt.GridLayout(6, 1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Mã Người Học");
        jLabel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.add(jLabel2);

        txtMaNH.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMaNH.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.add(txtMaNH);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Họ Và Tên");
        jLabel3.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.add(jLabel3);

        txtHoTen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtHoTen.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.add(txtHoTen);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Email");
        jLabel4.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.add(jLabel4);

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtEmail.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel3.add(txtEmail);

        jPanel2.add(jPanel3);

        jPanel4.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.setLayout(new java.awt.GridLayout(6, 0));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Số Điện Thoại");
        jLabel5.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.add(jLabel5);

        txtSDT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSDT.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.add(txtSDT);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Ngày Sinh");
        jLabel6.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.add(jLabel6);

        txtNgaySinh.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNgaySinh.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.add(txtNgaySinh);

        jLabel7.setText("Giới Tính");
        jLabel7.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.add(jLabel7);

        jPanel5.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        buttonGroup1.add(rdoNam);
        rdoNam.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rdoNam.setSelected(true);
        rdoNam.setText("Nam");
        rdoNam.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel5.add(rdoNam);

        buttonGroup1.add(rdoNu);
        rdoNu.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rdoNu.setText("Nữ");
        rdoNu.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel5.add(rdoNu);

        jPanel4.add(jPanel5);

        jPanel2.add(jPanel4);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ghi chú", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        txtGhiChu.setColumns(20);
        txtGhiChu.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtGhiChu.setRows(5);
        jScrollPane1.setViewportView(txtGhiChu);

        jPanel6.add(jScrollPane1);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel8.setLayout(new java.awt.GridLayout(1, 4, 15, 15));

        btnThem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setMinimumSize(new java.awt.Dimension(0, 0));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel8.add(btnThem);

        btnSua.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setMinimumSize(new java.awt.Dimension(0, 0));
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel8.add(btnSua);

        btnXoa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnXoa.setText("Xoá");
        btnXoa.setMinimumSize(new java.awt.Dimension(0, 0));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel8.add(btnXoa);

        btnMoi.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnMoi.setText("Mới");
        btnMoi.setMinimumSize(new java.awt.Dimension(0, 0));
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        jPanel8.add(btnMoi);

        jPanel7.add(jPanel8, java.awt.BorderLayout.WEST);

        jPanel9.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel9.setLayout(new java.awt.GridLayout(1, 0, 15, 0));

        btnFirst.setBackground(new java.awt.Color(255, 255, 255));
        btnFirst.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/firtsicon.png"))); // NOI18N
        btnFirst.setMinimumSize(new java.awt.Dimension(0, 0));
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        jPanel9.add(btnFirst);

        btnpre.setBackground(new java.awt.Color(255, 255, 255));
        btnpre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnpre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/preicon.png"))); // NOI18N
        btnpre.setMinimumSize(new java.awt.Dimension(0, 0));
        btnpre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpreActionPerformed(evt);
            }
        });
        jPanel9.add(btnpre);

        btnNext.setBackground(new java.awt.Color(255, 255, 255));
        btnNext.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/nexticon.png"))); // NOI18N
        btnNext.setMinimumSize(new java.awt.Dimension(0, 0));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel9.add(btnNext);

        btnLast.setBackground(new java.awt.Color(255, 255, 255));
        btnLast.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lasticon.png"))); // NOI18N
        btnLast.setMinimumSize(new java.awt.Dimension(0, 0));
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jPanel9.add(btnLast);

        jPanel7.add(jPanel9, java.awt.BorderLayout.EAST);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(0, 0));

        tblNguoiHoc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblNguoiHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Người Học", "Họ Và Tên", "Giới Tính", "Ngày Sinh", "Số Điện Thoại", "Email", "Mã Nhân Viên", "Ngày Đăng Ký", "Ghi Chú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNguoiHoc.setMinimumSize(new java.awt.Dimension(0, 0));
        tblNguoiHoc.setRowHeight(24);
        tblNguoiHoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNguoiHocMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblNguoiHoc);

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 153, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("QUẢN LÝ NGƯỜI HỌC");
        jLabel1.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel10.add(jLabel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1142, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblNguoiHocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNguoiHocMouseClicked
        // TODO add your handling code here:
        if (mouseClicked());
    }//GEN-LAST:event_tblNguoiHocMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        if (them());
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        if (sua());
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        if (xoa());
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnpreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpreActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnpreActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        switch (cbxTimKiem.getSelectedIndex()) {
            case 0:
                LoadDataToTable();
                break;
            case 1:
                String id = txtTimKiem.getText();
                if (id.trim().isEmpty()) {
                    MyMess.msgFalse(this, "Bạn phải nhập mã người học muốn tìm vào ô tìm kiếm!");
                    return;
                }
                if (!checkTrung(id)) {
                    MyMess.msgFalse(this, "Không có dữ liệu!");
                    return;
                }
                for (int i = 0; i < tblNguoiHoc.getRowCount(); i++) {
                    if (id.equals(tblNguoiHoc.getValueAt(i, 0))) {
                        this.index = i;
                    }
                }
                this.tblNguoiHoc.setRowSelectionInterval(index, index);
                showForm(index);
                break;
            case 2:
                String name = txtTimKiem.getText();
                if (name.trim().isEmpty()) {
                    MyMess.msgFalse(this, "Bạn phải nhập họ tên muốn tìm vào ô tìm kiếm!");
                    return;
                }
                try {

                    ArrayList<NguoiHoc> list = new ArrayList<>();
                    list = dao.selectByQuery("SELECTBYNAME", "%" + name + "%");
                    this.dtm.setRowCount(0);
                    for (NguoiHoc nh : list) {
                        setDataRow(nh, true);
                    }
                    this.index = 0;
                    updateStatus();
                    showForm(index);
                } catch (Exception ex) {
                    MyMess.msgFalse(this, "Không có dữ liệu!");
                    ex.printStackTrace();
                }
                break;
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnpre;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JTable tblNguoiHoc;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaNH;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    private void init() {

        //Khai báo lớp dao
        this.dao = new NHDao();

        //khai báo dtm
        this.dtm = (DefaultTableModel) tblNguoiHoc.getModel();

        //Load dữ liệu lên bảng
        LoadDataToTable();
    }

    public void LoadDataToTable() {
        //load dữ liệu từ cơ sở dữ liệu vào bảng
        this.dtm.setRowCount(0);
        ArrayList<NguoiHoc> list = new ArrayList<>();
        try {
            list = dao.selectALL();
            if (list.isEmpty()) {
                return;
            }
            for (NguoiHoc nh : list) {
                setDataRow(nh, true);
            }
            this.index = 0;
            updateStatus();
            showForm(index);
        } catch (Exception ex) {
            MyMess.msgFalse(this, ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void setDataRow(NguoiHoc nh, boolean kt) {
        //thêm một row vào bảng
        String gt = nh.isGioiTinh() ? "Nam" : "Nữ";
        String ngSinh;
        String ngDK;
        if (kt) {
            ngSinh = DateHelper.toString(DateHelper.toDate(nh.getNgaySinh(), "yyyy-MM-dd"), "dd/MM/yyyy");
            ngDK = DateHelper.toString(DateHelper.toDate(nh.getNgayDK(), "yyyy-MM-dd"), "dd/MM/yyyy");
        } else {
            ngSinh = DateHelper.toString(DateHelper.toDate(nh.getNgaySinh(), "MM/dd/yyyy"), "dd/MM/yyyy");
            ngDK = DateHelper.toString(DateHelper.toDate(nh.getNgayDK(), "MM/dd/yyyy"), "dd/MM/yyyy");
        }
        this.dtm.addRow(new Object[]{
            nh.getMaNH().trim(),
            nh.getHoTen(),
            gt,
            ngSinh,
            nh.getDienThoai(),
            nh.getEmail(),
            nh.getMaNV(),
            ngDK,
            nh.getGhiChu()
        });
    }

    private void updateStatus() {
        //cập nhập trạng thái cho các button điều hướng
        boolean first = (this.index <= 0);
        boolean last = (this.index == tblNguoiHoc.getRowCount() - 1);
        this.btnFirst.setEnabled(!first);
        this.btnpre.setEnabled(!first);
        this.btnLast.setEnabled(!last);
        this.btnNext.setEnabled(!last);
        if (index == -1) {
            this.tblNguoiHoc.setRowSelectionAllowed(false);
        } else {
            this.tblNguoiHoc.setRowSelectionAllowed(true);
        }
    }

    private void showForm(int i) {
        //hiển thị dữ liệu lên form tương ứng
        boolean isGT = false;
        if (tblNguoiHoc.getValueAt(i, 2).equals("Nam") || tblNguoiHoc.getValueAt(i, 2).equals("Male")) {
            isGT = true;
        }
        this.txtMaNH.setText(tblNguoiHoc.getValueAt(i, 0) + "");
        this.txtHoTen.setText(tblNguoiHoc.getValueAt(i, 1) + "");
        this.rdoNam.setSelected(isGT);
        this.rdoNu.setSelected(!isGT);
        this.txtNgaySinh.setText(tblNguoiHoc.getValueAt(i, 3) + "");
        this.txtSDT.setText(tblNguoiHoc.getValueAt(i, 4) + "");
        this.txtEmail.setText(tblNguoiHoc.getValueAt(i, 5) + "");
        this.txtGhiChu.setText(tblNguoiHoc.getValueAt(i, 8) + "");
        tblNguoiHoc.setRowSelectionInterval(i, i);
    }

    private NguoiHoc getForm() {
        //lấy dữ liệu đã nhập từ trên form
        String manh = txtMaNH.getText().trim();
        String hoTen = txtHoTen.getText();
        String ngaySinh = DateHelper.toString(DateHelper.toDate(this.txtNgaySinh.getText(), "dd/MM/yyyy"), "MM/dd/yyyy");
        boolean gioiTinh = rdoNam.isSelected();
        String sdt = txtSDT.getText();
        String Email = txtEmail.getText();
        String ghiChu = txtGhiChu.getText();
        String maNV = Auth.nguoiDungHienTai.getMaNV();
        String ngayDK = DateHelper.toString(new Date(), "MM/dd/yyyy");
        return new NguoiHoc(manh, hoTen, ngaySinh, gioiTinh, sdt, Email, ghiChu, maNV, ngayDK);
    }

    private void clearForm() {
        //xóa trắng form
        this.txtMaNH.setText("");
        this.txtHoTen.setText("");
        this.txtEmail.setText("");
        this.txtNgaySinh.setText("");
        this.txtSDT.setText("");
        this.txtGhiChu.setText("");
        this.rdoNam.setSelected(true);
        this.index = -1;
        updateStatus();
    }

    private boolean mouseClicked() {
        //xử lý sưk kiện click lên table
        this.index = tblNguoiHoc.getSelectedRow();
        updateStatus();
        if (index == -1) {
            return true;
        }
        showForm(index);
        return false;
    }

    private void next() {
        index++;
        updateStatus();
        showForm(index);
    }

    private void last() {
        index = tblNguoiHoc.getRowCount() - 1;
        updateStatus();
        showForm(index);
    }

    private void prev() {
        index--;
        updateStatus();
        showForm(index);
    }

    private void first() {
        index = 0;
        updateStatus();
        showForm(index);
    }

    private boolean checkTrung(String maNH) {
        try {
            if (this.dao.selectByID(maNH) != null) {
                return true;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            MyMess.msgFalse(this, "Lỗi truy vấn");
            return true;
        }
        return false;
    }

    private boolean checkForm() {
        //checkRong
        StringBuilder loi = new StringBuilder();
        // check mã người học
        if (MyValidate.isEmpty(txtMaNH)) {
            loi.append("Không được để trống mã người học\n");
        } else if (txtMaNH.getText().length() > 50) {
            loi.append("Mã người học không được quá 50 ký tự\n");
        }
        //check họ tên nhân viên
        Pattern pHoTen = Pattern.compile("^[\\p{L} .'-]+$");
        if (MyValidate.isEmpty(txtHoTen)) {
            loi.append("Không được để trống họ tên người học\n");
        } else if (!pHoTen.matcher(txtHoTen.getText()).find()) {
            loi.append("Họ tên không hợp lệ\n");
        } else if (txtHoTen.getText().length() > 50) {
            loi.append("Họ tên người học không được quá 50 ký tự\n");
        }
        //check sdt
        if (MyValidate.isEmpty(txtSDT)) {
            loi.append("Không được để trống số điện thoại người học\n");
        } else if (!txtSDT.getText().matches("^(0|\\+84)(\\s|\\.)?((3[2-9])|(5[689])|(7[06-9])|(8[1-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$")) {
            loi.append("Số điện thoại không hợp lệ hoặc không đủ 10 số\n");
        }
        //check ngày sinh
        if (MyValidate.isEmpty(txtNgaySinh)) {
            loi.append("Bạn phải nhập ngày sinh\n");
        } else {
            try {
                Date ns = DateHelper.toDate(txtNgaySinh.getText(), "dd/MM/yyyy");
                Date now = new Date();
                if (now.getYear() - ns.getYear() < 18) {
                    loi.append("tuổi phải lớn hơn 18");
                }
            } catch (Exception e) {
                e.printStackTrace();
                loi.append("Sai định dạng(dd/MM/yyyy)");
            }
        }
        //check Email
        Pattern pEmail = Pattern.compile("^\\w+@+[a-zA-Z]+(\\.[a-zA-Z]+){1,2}$");
        if (MyValidate.isEmpty(txtEmail)) {
            loi.append("Không được để trống Email\n");
        } else if (!pEmail.matcher(txtEmail.getText()).find()) {
            loi.append("Email phải đúng định dạng!\nVD: ...@gmail.com hoặc ...@fpt.edu.vn\n");
        }
        //hiển thị thông báo lỗi
        if (loi.length() > 0) {
            MyMess.msgFalse(this, loi.toString());
            return true;
        }
        return false;
    }

    private boolean them() {
        if (checkForm()) {
            return true;
        }
        String id = txtMaNH.getText();
        if (checkTrung(id)) {
            MyMess.msgFalse(this, "Mã người học đã tồn tại");
            return true;
        }
        try {
            this.dao.insert(getForm());
            MyMess.msgTrue(this, "Thêm thành công");
            setDataRow(getForm(), false);
            this.index = tblNguoiHoc.getRowCount() - 1;
            this.tblNguoiHoc.setRowSelectionInterval(index, index);
            showForm(index);
        } catch (Exception ex) {
            ex.printStackTrace();
            MyMess.msgFalse(this, "Lỗi truy vấn");
            return true;
        }
        return false;
    }

    private boolean sua() {
        String id = txtMaNH.getText();
        if (checkForm()) {
            return true;
        }
        //check trùng
        if (!checkTrung(id)) {
            MyMess.msgFalse(this, "Mã người học Không tồn tại");
            return true;
        }

        //sủa chuyên đề
        try {
            this.dao.update(getForm());
            MyMess.msgTrue(this, "Sửa thành công");

            LoadDataToTable();
        } catch (Exception ex) {
            MyMess.msgFalse(this, "Lỗi truy vấn");
            ex.printStackTrace();
            return true;
        }
        for (int i = 0; i < tblNguoiHoc.getRowCount(); i++) {
            if (id.equals(tblNguoiHoc.getValueAt(i, 0))) {
                this.index = i;
            }
        }
        this.tblNguoiHoc.setRowSelectionInterval(index, index);
        showForm(index);
        return false;
    }

    private String nhapMaNH(String maNH) {
        //Bắt phải nhập không nhập thì bấm cancel mới thoát được nhá
        if (maNH.isEmpty()) {
            maNH = String.valueOf(MyMess.prompt(this, "Bạn phải nhập vào mã người học muốn xóa"));
            if (maNH.isEmpty()) {
                maNH = nhapMaNH(maNH);
            }
        }
        if (!checkTrung(maNH)) {
            maNH = String.valueOf(MyMess.prompt(this, "Mã người học " + maNH + " này không tồn tại\n"
                    + "Xin hãy kiểm tra lại"));
            if (!checkTrung(maNH)) {
                maNH = nhapMaNH(maNH);
            }
        }
        return maNH;
    }

    private boolean xoa() {
        String maNH = txtMaNH.getText();
        maNH = nhapMaNH(maNH);
        if (!MyMess.question(this, "Bạn có muốn xóa chuyên đề " + maNH + " này không?")) {
            try {
                this.dao.delete(maNH);
                MyMess.msgTrue(this, "Xoá thành công");
                for (int i = 0; i < tblNguoiHoc.getRowCount(); i++) {
                    if (maNH.equals(tblNguoiHoc.getValueAt(i, 0))) {
                        this.index = i;
                    }
                }
                this.dtm.removeRow(index);
                showForm(index > tblNguoiHoc.getRowCount() - 1 ? tblNguoiHoc.getRowCount() - 1 : index);
            } catch (Exception ex) {
                MyMess.msgFalse(this, "Lỗi truy vấn");
                ex.printStackTrace();
                return true;
            }
        }
        return false;
    }
}
